#!/bin/bash

set -e

env=$1

cluster_size=3

overlay_network_subnet=10.37.6.0/24

region=us-west-2
vpc_id=vpc-35de3850
subnet_ids=(subnet-40be5025 subnet-fe67698a subnet-bc879afa)
instance_type=m4.2xlarge
ssh_keypath=~/.ssh/devs
ami=ami-06b94666
user=ubuntu

zones=(a b c)

provision_machines ()
{
  echo -e "\033[34mProvisioning $env cluster with docker-machine...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    # --native-ssh works around a bug where it was setting the permissions too
    # open on the private SSH key in ~/.docker/machine/machines/... even if it
    # wasn't creating it. This rendered it unable to SSH into the machines it
    # was creating.
    docker-machine --native-ssh create --driver amazonec2 \
                   --amazonec2-region $region --amazonec2-vpc-id $vpc_id \
                   --amazonec2-security-group docker-swarm-$env \
                   --amazonec2-subnet-id ${subnet_ids[$i-1]} \
                   --amazonec2-instance-type $instance_type \
                   --amazonec2-use-private-address \
                   --amazonec2-use-ebs-optimized-instance \
                   --amazonec2-ssh-keypath $ssh_keypath \
                   --amazonec2-ami $ami --amazonec2-zone ${zones[$i-1]} \
                   docker-swarm-${env}-$i &
  done
  wait
}

provision_consul_cluster ()
{
  echo -e "\033[34mBootstrapping Consul cluster...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running consul on $node..."
    node_ip=$(docker-machine ip $node)
    eval $(docker-machine env --shell bash $node)
    docker run -d --net=host --name consul --restart=unless-stopped \
           -e 'CONSUL_LOCAL_CONFIG={"skip_leave_on_interrupt": true}' \
           consul:v0.6.4 agent -server -dc aws-$region -ui -bind=$node_ip \
           -client=0.0.0.0 -bootstrap-expect=$cluster_size \
           $(if [[ $i -gt 1 ]]; then echo -retry-join=$(docker-machine ip docker-swarm-${env}-1); fi)
  done
}

configure_docker_cluster_options ()
{
  echo -e "\033[34mConfiguring Docker daemons to use Consul...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    node_ip=$(docker-machine ip $node)
    ssh_cmd="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $user@$node_ip"
    echo "Configuring Docker cluster-store on $node..."
    $ssh_cmd "sudo sed -i '/^ExecStart=/s|\$| --cluster-store=consul:\/\/${node_ip}:8500 --cluster-advertise=ens3:2376|' /etc/systemd/system/docker.service"
    $ssh_cmd sudo systemctl daemon-reload
    $ssh_cmd sudo service docker restart
  done
}

provision_dnsmasq_forwarders ()
{
  echo -e "\033[34mProvisioning dnsmasq forwarders for Consul DNS...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running dnsmasq on $node..."
    node_ip=$(docker-machine ip $node)
    eval $(docker-machine env --shell bash $node)
    docker run -d --name dnsmasq -p 53:53/tcp -p 53:53/udp --cap-add=NET_ADMIN \
           --restart=unless-stopped \
           andyshinn/dnsmasq:2.75 -S /consul/${node_ip}#8600 --log-facility=-
  done
}

provision_docker_swarm_managers ()
{
  echo -e "\033[34mRunning Docker Swarm managers...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running swarm manager on $node..."
    node_ip=$(docker-machine ip $node)
    eval $(docker-machine env --shell bash $node)
    docker run -d -p 4000:4000 --name swarm_manager --restart=unless-stopped \
           --volume /etc/docker:/tls:ro swarm manage -H :4000 --tlsverify \
           --tlscacert /tls/ca.pem --tlscert /tls/server.pem \
           --tlskey /tls/server-key.pem --replication --advertise $node_ip:4000 \
           consul://${node_ip}:8500
  done
}

provision_docker_swarm_nodes ()
{
  echo -e "\033[34mRunning Docker Swarm nodes...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running swarm node on $node..."
    node_ip=$(docker-machine ip $node)
    eval $(docker-machine env --shell bash $node)
    docker run -d --name swarm_node --restart=unless-stopped swarm join \
           --advertise $node_ip:2376 consul://${node_ip}:8500
  done
}

create_overlay_network ()
{
  echo -e "\033[34mCreating $env overlay network...\033[0m"

  eval $(docker-machine env --shell bash docker-swarm-${env}-1)
  docker network create --driver overlay --subnet=$overlay_network_subnet $env
}

provision_rabbitmq_cluster ()
{
  echo -e "\033[34mProvisioning RabbitMQ cluster...\033[0m"

  node_ip=$(docker-machine ip docker-swarm-${env}-1)
  eval $(docker-machine env --shell bash docker-swarm-${env}-1)

  for (( i=1; i<=$cluster_size; i++ )); do
    echo "Running RabbitMQ node $i"
    docker -H ${node_ip}:4000 run -d --dns=172.17.0.1 --dns-search=node.consul \
           --name rabbitmq-$i --hostname docker-swarm-${env}-$i \
           -p 5672:5672 -p 15672:15672 -p 4369:4369 -p 25672:25672 \
           --restart=unless-stopped -e AUTOCLUSTER_TYPE=consul \
           -e AUTOCLUSTER_CLEANUP=true -e CLEANUP_WARN_ONLY=false \
           -e AUTOCLUSTER_LOG_LEVEL=debug -e CONSUL_HOST=172.17.0.1 \
           cap10morgan/rabbitmq-autocluster-debug:0.6.0
    # give the first node a chance to come up & register w/ consul
    if [[ $i == 1 ]]; then sleep 30; fi
  done
}

provision_machines
provision_consul_cluster
configure_docker_cluster_options
provision_dnsmasq_forwarders
provision_docker_swarm_managers
provision_docker_swarm_nodes
create_overlay_network
provision_rabbitmq_cluster
