#!/bin/bash

set -e

env=$1

cluster_size=3

region=us-west-2
vpc_id=vpc-35de3850
subnet_ids=(subnet-40be5025 subnet-fe67698a subnet-bc879afa)
instance_type=m4.2xlarge
ssh_keypath=~/.ssh/devs
ami=ami-06b94666

zones=(a b c)

provision_machines ()
{
  echo -e "\033[34mProvisioning $env cluster with docker-machine...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    # --native-ssh works around a bug where it was setting the permissions too
    # open on the private SSH key in ~/.docker/machine/machines/... even if it
    # wasn't creating it. This rendered it unable to SSH into the machines it
    # was creating.
    docker-machine --native-ssh create --driver amazonec2 \
                   --amazonec2-region $region --amazonec2-vpc-id $vpc_id \
                   --amazonec2-security-group docker-swarm-$env \
                   --amazonec2-subnet-id ${subnet_ids[$i-1]} \
                   --amazonec2-instance-type $instance_type \
                   --amazonec2-use-private-address \
                   --amazonec2-use-ebs-optimized-instance \
                   --amazonec2-ssh-keypath $ssh_keypath \
                   --amazonec2-ami $ami --amazonec2-zone ${zones[$i-1]} \
                   docker-swarm-${env}-$i
  done
}

provision_consul_cluster ()
{
  echo -e "\033[34mBootstrapping Consul cluster...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running consul on $node..."
    eval $(docker-machine env --shell bash $node)
    docker run -d --net=host --name consul \
           -e 'CONSUL_LOCAL_CONFIG={"skip_leave_on_interrupt": true}' \
           consul agent -server -dc aws-$region -ui -bind=0.0.0.0 \
           -client=0.0.0.0 -bootstrap-expect=$cluster_size \
           $(if [[ $i -gt 1 ]]; then echo -retry-join=$(docker-machine ip docker-swarm-${env}-1); fi)
  done
}

provision_docker_swarm_managers ()
{
  echo -e "\033[34mRunning Docker Swarm managers...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running swarm manager on $node..."
    node_ip=$(docker-machine ip $node)
    eval $(docker-machine env --shell bash $node)
    docker run -d -p 4000:4000 --name swarm_manager --volume /etc/docker:/tls:ro \
           swarm manage -H :4000 --tlsverify --tlscacert /tls/ca.pem \
           --tlscert /tls/server.pem --tlskey /tls/server-key.pem \
           --replication --advertise $node_ip:4000 consul://$node_ip:8500
  done
}

provision_docker_swarm_nodes ()
{
  echo -e "\033[34mRunning Docker Swarm nodes...\033[0m"

  for (( i=1; i<=$cluster_size; i++ )); do
    node=docker-swarm-${env}-$i
    echo "Running swarm node on $node..."
    node_ip=$(docker-machine ip $node)
    eval $(docker-machine env --shell bash $node)
    docker run -d --name swarm_node swarm join --advertise $node_ip:2376 \
           consul://$node_ip:8500
  done
}

create_overlay_network ()
{
  echo -e "\033[34mCreating $env overlay network...\033[0m"

  eval $(docker-machine env --shell bash docker-swarm-${env}-1)
  docker network create --driver overlay --subnet=10.37.0.0/16 $env
}

provision_machines
provision_consul_cluster
provision_docker_swarm_managers
provision_docker_swarm_nodes
create_overlay_network
